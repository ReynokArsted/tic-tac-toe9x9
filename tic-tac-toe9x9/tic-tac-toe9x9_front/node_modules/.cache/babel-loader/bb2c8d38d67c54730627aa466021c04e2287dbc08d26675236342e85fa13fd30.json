{"ast":null,"code":"var _jsxFileName = \"/home/filonovets/tic-tac-toe9x9/tic-tac-toe9x9/tic-tac-toe9x9_front/src/Game.jsx\";\n/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/\n\nimport { Component } from \"react\";\n//import io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Square extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        width: '50px',\n        height: '50px',\n        fontSize: '24px',\n        display: 'inline-block',\n        border: '1px solid black',\n        backgroundColor: 'white'\n      },\n      onClick: this.props.onClick,\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Board: Array(9).fill(null).map(() => Array(9).fill(null)),\n      ChangePlayer: true,\n      Scores: {\n        X: 0,\n        O: 0\n      },\n      winner: null\n      //currentField: null,\n    };\n    // Обработчик клика на клетку\n    this.SClick = (fieldIndex, index) => {\n      console.log(`click field ${fieldIndex + 1}, index ${index + 1}`);\n\n      // Проверка, завершена ли игра или занята ли клетка, или заполнено ли большее поле\n\n      // Отправить информвцию о ходе на сервер\n    };\n    this.RenderSquare = (fieldIndex, index) => {\n      const field = this.state.Board[fieldIndex];\n      return /*#__PURE__*/_jsxDEV(Square, {\n        value: field[index],\n        onClick: () => this.SClick(fieldIndex, index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this);\n    };\n    this.RenderBoard = () => {\n      return (\n        /*#__PURE__*/\n        // Поменять способ рендера!\n        _jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(3, 1fr)',\n            gap: '0px'\n          },\n          children: this.state.Board.map((_, fieldIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'grid',\n              gridTemplateColumns: 'repeat(3, 1fr)',\n              gap: '0px'\n            },\n            children: Array.from({\n              length: 9\n            }, (_, index) => this.RenderSquare(fieldIndex, index))\n          }, fieldIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)\n      );\n    };\n  }\n  componentDidMount() {\n    // Подключение к серверу\n\n    // Получить обновление состояния игры\n\n    // Обработка завершения игры\n  }\n  componentWillUnmount() {\n    // Обработка отключения от сервера\n  }\n  render() {\n    const {\n      Scores,\n      NextStep,\n      winner\n    } = this.state;\n    const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`;\n    const scoresText = `Счёт: X - ${Scores.X}, O - ${Scores.O}`;\n    const gameStatus = winner ? `${winner} победил!` : status;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: gameStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: scoresText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.RenderBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Game extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field_position\",\n        children: [/*#__PURE__*/_jsxDEV(\"field\", {\n          className: \"field\",\n          children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"chat\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n}","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","render","style","width","height","fontSize","display","border","backgroundColor","onClick","props","children","value","fileName","_jsxFileName","lineNumber","columnNumber","Board","constructor","args","state","Array","fill","map","ChangePlayer","Scores","X","O","winner","SClick","fieldIndex","index","console","log","RenderSquare","field","RenderBoard","gridTemplateColumns","gap","_","from","length","componentDidMount","componentWillUnmount","NextStep","status","scoresText","gameStatus","marginBottom","Game","className"],"sources":["/home/filonovets/tic-tac-toe9x9/tic-tac-toe9x9/tic-tac-toe9x9_front/src/Game.jsx"],"sourcesContent":["/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/\n\n\nimport { Component } from \"react\";\n//import io from 'socket.io-client';\n\nexport class Square extends Component {\n    render() {\n        return (\n            <button\n                style={{\n                    width: '50px',\n                    height: '50px',\n                    fontSize: '24px',\n                    display: 'inline-block',\n                    border: '1px solid black',\n                    backgroundColor: 'white', \n                }} \n                onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => Array(9).fill(null)),\n        ChangePlayer: true,\n        Scores: { X: 0, O: 0 },\n        winner: null,\n        //currentField: null,\n    };\n\n    componentDidMount() {\n        // Подключение к серверу\n\n        // Получить обновление состояния игры\n\n        // Обработка завершения игры\n    }\n\n    componentWillUnmount() {\n        // Обработка отключения от сервера\n    }\n\n    // Обработчик клика на клетку\n    SClick = (fieldIndex, index) => {\n        console.log(`click field ${fieldIndex+1}, index ${index+1}`)\n        \n        // Проверка, завершена ли игра или занята ли клетка, или заполнено ли большее поле\n\n        // Отправить информвцию о ходе на сервер\n    };\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex];\n        return (\n            <Square\n                key={index}\n                value={field[index]}\n                onClick={() => this.SClick(fieldIndex, index)}\n            />\n        );\n    };\n\n    RenderBoard = () => {\n        return (\n            // Поменять способ рендера!\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '0px' }}>\n                {this.state.Board.map((_, fieldIndex) => (\n                    <div key={fieldIndex} style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '0px' }}>\n                        {Array.from({ length: 9 }, (_, index) => this.RenderSquare(fieldIndex, index))}\n                    </div>\n                ))}\n            </div>\n        );\n    };\n\n    render() {\n        const { Scores, NextStep, winner } = this.state;\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`;\n        const scoresText = `Счёт: X - ${Scores.X}, O - ${Scores.O}`;\n        const gameStatus = winner ? `${winner} победил!` : status;\n\n        return (\n            <div>\n                <div style={{ marginBottom: '10px' }}>{gameStatus}</div>\n                <div>{scoresText}</div>\n                <div>{this.RenderBoard()}</div>\n            </div>\n        );\n    }\n}\n\nexport class Game extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field className=\"field\"><Board/></field>\n                <chat></chat>\n                </div>\n            </>\n        );\n    }\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}