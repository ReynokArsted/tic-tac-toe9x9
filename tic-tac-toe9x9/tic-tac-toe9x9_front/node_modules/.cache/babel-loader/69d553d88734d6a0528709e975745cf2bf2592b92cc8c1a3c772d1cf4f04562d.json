{"ast":null,"code":"/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/","map":{"version":3,"names":[],"sources":["/home/RA/projects/tic-tac-toe9x9---front/tic-tac-toe9x9/src/Game.jsx"],"sourcesContent":["/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}