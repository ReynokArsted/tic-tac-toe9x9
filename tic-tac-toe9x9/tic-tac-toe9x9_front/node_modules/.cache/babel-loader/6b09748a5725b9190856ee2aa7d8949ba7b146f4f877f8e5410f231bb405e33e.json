{"ast":null,"code":"var _jsxFileName = \"/home/RA/projects/tic-tac-toe9x9---front/tic-tac-toe9x9/src/Game.jsx\";\n/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n*/\n\nimport { Component } from 'react';\nimport io from 'socket.io-client';\n//import { Square } from './Square'; // Предполагается, что компонент Square в отдельном файле\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Square extends Component {\n  render() {\n    const {\n      value,\n      onClick\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        width: '60px',\n        height: '60px',\n        fontSize: '24px',\n        display: 'inline-block',\n        border: '1px solid black',\n        backgroundColor: 'white',\n        cursor: 'pointer'\n      },\n      onClick: onClick // Вызов onClick при клике\n      ,\n      children: [value, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Board: Array(9).fill(null),\n      // Начальное состояние игрового поля\n      NextStep: true,\n      // Ход X или O\n      Scores: {\n        X: 0,\n        O: 0\n      } // Счёт\n    };\n    // Метод для обработки хода\n    this.SClick = index => {\n      const {\n        Board,\n        NextStep\n      } = this.state;\n      if (Board[index]) return; // Если клетка занята, не делаем ход\n\n      // Отправляем событие на сервер с информацией о ходе\n      this.socket.emit('makeMove', {\n        index\n      });\n\n      // Локальное обновление состояния (хотя сервер тоже передаст это состояние)\n      const newBoard = [...Board];\n      newBoard[index] = NextStep ? 'X' : 'O';\n      this.setState({\n        Board: newBoard,\n        NextStep: !NextStep\n      });\n    };\n  }\n  componentDidMount() {\n    // Подключение к серверу через socket.io\n    this.socket = io('http://localhost:4000');\n\n    // Получаем обновленное состояние игры от сервера\n    this.socket.on('gameState', gameState => {\n      this.setState({\n        Board: gameState.Board,\n        NextStep: gameState.NextStep,\n        Scores: gameState.Scores\n      });\n    });\n  }\n  componentWillUnmount() {\n    // Отключаемся от сервера при размонтировании компонента\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n  render() {\n    const {\n      Board,\n      NextStep,\n      Scores\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\u0421\\u043B\\u0435\\u0434\\u0443\\u044E\\u0449\\u0438\\u0439 \\u0445\\u043E\\u0434: \", NextStep ? 'X' : 'O']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"\\u0421\\u0447\\u0451\\u0442: X - \", Scores.X, \", O - \", Scores.O]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 1fr)',\n          gap: '10px'\n        },\n        children: Board.map((square, index) => /*#__PURE__*/_jsxDEV(Square, {\n          value: square,\n          onClick: () => this.SClick(index) // Отправка хода на сервер\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n//export default Board;","map":{"version":3,"names":["Component","io","jsxDEV","_jsxDEV","Square","render","value","onClick","props","style","width","height","fontSize","display","border","backgroundColor","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","Board","constructor","args","state","Array","fill","NextStep","Scores","X","O","SClick","index","socket","emit","newBoard","setState","componentDidMount","on","gameState","componentWillUnmount","disconnect","gridTemplateColumns","gap","map","square"],"sources":["/home/RA/projects/tic-tac-toe9x9---front/tic-tac-toe9x9/src/Game.jsx"],"sourcesContent":["/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n*/\n\nimport { Component } from 'react';\nimport io from 'socket.io-client';\n//import { Square } from './Square'; // Предполагается, что компонент Square в отдельном файле\n\nexport class Square extends Component {\n    render() {\n        const { value, onClick } = this.props;\n\n        return (\n            <button\n                style={{\n                    width: '60px',\n                    height: '60px',\n                    fontSize: '24px',\n                    display: 'inline-block',\n                    border: '1px solid black',\n                    backgroundColor: 'white',\n                    cursor: 'pointer',\n                }}\n                onClick={onClick} // Вызов onClick при клике\n            >\n                {value} {/* Отображение X или O, если клетка занята */}\n            </button>\n        );\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null), // Начальное состояние игрового поля\n        NextStep: true, // Ход X или O\n        Scores: { X: 0, O: 0 }, // Счёт\n    };\n\n    componentDidMount() {\n        // Подключение к серверу через socket.io\n        this.socket = io('http://localhost:4000');\n\n        // Получаем обновленное состояние игры от сервера\n        this.socket.on('gameState', (gameState) => {\n            this.setState({\n                Board: gameState.Board,\n                NextStep: gameState.NextStep,\n                Scores: gameState.Scores,\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        // Отключаемся от сервера при размонтировании компонента\n        if (this.socket) {\n            this.socket.disconnect();\n        }\n    }\n\n    // Метод для обработки хода\n    SClick = (index) => {\n        const { Board, NextStep } = this.state;\n        if (Board[index]) return; // Если клетка занята, не делаем ход\n\n        // Отправляем событие на сервер с информацией о ходе\n        this.socket.emit('makeMove', { index });\n\n        // Локальное обновление состояния (хотя сервер тоже передаст это состояние)\n        const newBoard = [...Board];\n        newBoard[index] = NextStep ? 'X' : 'O';\n        this.setState({\n            Board: newBoard,\n            NextStep: !NextStep,\n        });\n    };\n\n    render() {\n        const { Board, NextStep, Scores } = this.state;\n\n        return (\n            <div>\n                <div>Следующий ход: {NextStep ? 'X' : 'O'}</div>\n                <div>Счёт: X - {Scores.X}, O - {Scores.O}</div>\n                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n                    {Board.map((square, index) => (\n                        <Square\n                            key={index}\n                            value={square}\n                            onClick={() => this.SClick(index)} // Отправка хода на сервер\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\n//export default Board;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}