{"ast":null,"code":"var _jsxFileName = \"/home/RA/projects/tic-tac-toe9x9---front/tic-tac-toe9x9/src/Game.jsx\";\n/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/\n\nimport { Component } from \"react\";\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Square extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        width: '60px',\n        height: '60px',\n        fontSize: '24px',\n        display: 'inline-block',\n        border: '1px solid black',\n        backgroundColor: 'white'\n      },\n      onClick: this.props.onClick,\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Board: Array(9).fill(null).map(() => Array(9).fill(null)),\n      NextStep: true,\n      Scores: {\n        X: 0,\n        O: 0\n      },\n      winner: null,\n      currentField: null\n    };\n    // Обработчик клика на клетку\n    this.SClick = (fieldIndex, index) => {\n      const {\n        Board,\n        NextStep,\n        winner\n      } = this.state;\n      if (Board[fieldIndex][index] || winner) {\n        return; // Клетка уже занята или игра завершена\n      }\n\n      // Отправить ход на сервер\n      this.socket.emit('makeMove', {\n        fieldIndex,\n        index\n      });\n    };\n    this.RenderSquare = (rowIndex, colIndex) => {\n      const {\n        Board\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(Square, {\n        value: Board[rowIndex][colIndex],\n        onClick: () => this.SClick(rowIndex, colIndex)\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this);\n    };\n    this.RenderBoard = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 1fr)',\n          gap: '10px'\n        },\n        children: this.state.Board.map((_, fieldIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'grid',\n            gridTemplateColumns: 'repeat(3, 1fr)',\n            gap: '5px'\n          },\n          children: Array.from({\n            length: 9\n          }, (_, index) => this.RenderSquare(fieldIndex, index))\n        }, fieldIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this);\n    };\n  }\n  componentDidMount() {\n    this.socket = io('http://localhost:4000');\n\n    // Получаем обновленное состояние игры\n    this.socket.on('gameState', gameState => {\n      this.setState({\n        Board: gameState.Board,\n        NextStep: gameState.NextStep,\n        Scores: gameState.Scores,\n        winner: gameState.winner\n      });\n    });\n\n    // Обработка завершения игры\n    this.socket.on('gameOver', finalScores => {\n      alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`);\n    });\n  }\n  componentWillUnmount() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n  render() {\n    const {\n      Scores,\n      NextStep,\n      winner\n    } = this.state;\n    const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`;\n    const scoresText = `Счёт: X - ${Scores.X}, O - ${Scores.O}`;\n    const gameStatus = winner ? `${winner} победил!` : status;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: gameStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: scoresText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(9, 1fr)',\n          gap: '1px'\n        },\n        children: Array.from({\n          length: 9\n        }, (_, rowIndex) => Array.from({\n          length: 9\n        }, (_, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center'\n          },\n          children: this.RenderSquare(rowIndex, colIndex)\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Game extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field_position\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\",\n            marginTop: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}","map":{"version":3,"names":["Component","io","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","render","style","width","height","fontSize","display","border","backgroundColor","onClick","props","children","value","fileName","_jsxFileName","lineNumber","columnNumber","Board","constructor","args","state","Array","fill","map","NextStep","Scores","X","O","winner","currentField","SClick","fieldIndex","index","socket","emit","RenderSquare","rowIndex","colIndex","RenderBoard","gridTemplateColumns","gap","_","from","length","componentDidMount","on","gameState","setState","finalScores","alert","componentWillUnmount","disconnect","status","scoresText","gameStatus","marginBottom","justifyContent","Game","className","textAlign","marginTop"],"sources":["/home/RA/projects/tic-tac-toe9x9---front/tic-tac-toe9x9/src/Game.jsx"],"sourcesContent":["/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/\n\n\nimport { Component } from \"react\";\nimport io from 'socket.io-client';\n\nexport class Square extends Component {\n    render() {\n        return (\n            <button\n                style={{\n                    width: '60px',\n                    height: '60px',\n                    fontSize: '24px',\n                    display: 'inline-block',\n                    border: '1px solid black',\n                    backgroundColor: 'white', \n                }} \n                onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => Array(9).fill(null)),\n        NextStep: true,\n        Scores: { X: 0, O: 0 },\n        winner: null,\n        currentField: null,\n    };\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000');\n\n        // Получаем обновленное состояние игры\n        this.socket.on('gameState', (gameState) => {\n            this.setState({\n                Board: gameState.Board,\n                NextStep: gameState.NextStep,\n                Scores: gameState.Scores,\n                winner: gameState.winner,\n            });\n        });\n\n        // Обработка завершения игры\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`);\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect();\n        }\n    }\n\n    // Обработчик клика на клетку\n    SClick = (fieldIndex, index) => {\n        const { Board, NextStep, winner } = this.state;\n\n        if (Board[fieldIndex][index] || winner) {\n            return; // Клетка уже занята или игра завершена\n        }\n\n        // Отправить ход на сервер\n        this.socket.emit('makeMove', { fieldIndex, index });\n    };\n\n    RenderSquare = (rowIndex, colIndex) => {\n        const { Board } = this.state;\n        return (\n            <Square\n                key={`${rowIndex}-${colIndex}`}\n                value={Board[rowIndex][colIndex]}\n                onClick={() => this.SClick(rowIndex, colIndex)}\n            />\n        );\n    };\n\n    RenderBoard = () => {\n        return (\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n                {this.state.Board.map((_, fieldIndex) => (\n                    <div key={fieldIndex} style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '5px' }}>\n                        {Array.from({ length: 9 }, (_, index) => this.RenderSquare(fieldIndex, index))}\n                    </div>\n                ))}\n            </div>\n        );\n    };\n\n    render() {\n        const { Scores, NextStep, winner } = this.state;\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`;\n        const scoresText = `Счёт: X - ${Scores.X}, O - ${Scores.O}`;\n        const gameStatus = winner ? `${winner} победил!` : status;\n\n        return (\n            <div>\n                <div style={{ marginBottom: '10px' }}>{gameStatus}</div>\n                <div>{scoresText}</div>\n                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(9, 1fr)', gap: '1px' }}>\n                    {/* Рендерим сетку 9x9 */}\n                    {Array.from({ length: 9 }, (_, rowIndex) => (\n                        Array.from({ length: 9 }, (_, colIndex) => (\n                            <div key={`${rowIndex}-${colIndex}`} style={{ display: 'flex', justifyContent: 'center' }}>\n                                {this.RenderSquare(rowIndex, colIndex)}\n                            </div>\n                        ))\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport class Game extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}></div>\n                </div>\n                <Board />\n            </>\n        );\n    }\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}