{"ast":null,"code":"var _jsxFileName = \"/home/RA/projects/tic-tac-toe9x9---front/tic-tac-toe9x9/src/Game.jsx\";\n/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/\n\nimport { Component } from \"react\";\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Square extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        width: '60px',\n        height: '60px',\n        fontSize: '24px',\n        display: 'inline-block',\n        border: '1px solid black',\n        backgroundColor: 'white'\n      },\n      onClick: this.props.onClick,\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Board: Array(9).fill(null),\n      NextStep: true,\n      Scores: {\n        X: 0,\n        O: 0\n      },\n      winner: null\n    };\n    // Обработчик клика на клетку\n    this.SClick = index => {\n      const {\n        Board,\n        NextStep,\n        winner\n      } = this.state;\n      if (Board[index] || winner) {\n        return; // Клетка уже занята или игра завершена\n      }\n\n      // Отправить ход на сервер\n      this.socket.emit('makeMove', {\n        index\n      });\n    };\n  }\n  componentDidMount() {\n    this.socket = io('http://localhost:4000');\n\n    // Получаем обновленное состояние игры\n    this.socket.on('gameState', gameState => {\n      this.setState({\n        Board: gameState.Board,\n        NextStep: gameState.NextStep,\n        Scores: gameState.Scores,\n        winner: gameState.winner\n      });\n    });\n\n    // Обработка завершения игры\n    this.socket.on('gameOver', finalScores => {\n      alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`);\n    });\n  }\n  componentWillUnmount() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  }\n  render() {\n    const {\n      Scores,\n      NextStep,\n      Board\n    } = this.state;\n    const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`;\n    const scoresText = `Счёт: X - ${Scores.X}, O - ${Scores.O}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: scoresText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'grid',\n          gridTemplateColumns: 'repeat(3, 1fr)',\n          gap: '10px'\n        },\n        children: Board.map((value, index) => /*#__PURE__*/_jsxDEV(Square, {\n          value: value,\n          onClick: () => this.SClick(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport class Game extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"field_position\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: \"center\",\n            marginTop: \"20px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}","map":{"version":3,"names":["Component","io","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","render","style","width","height","fontSize","display","border","backgroundColor","onClick","props","children","value","fileName","_jsxFileName","lineNumber","columnNumber","Board","constructor","args","state","Array","fill","NextStep","Scores","X","O","winner","SClick","index","socket","emit","componentDidMount","on","gameState","setState","finalScores","alert","componentWillUnmount","disconnect","status","scoresText","marginBottom","gridTemplateColumns","gap","map","Game","className","textAlign","marginTop"],"sources":["/home/RA/projects/tic-tac-toe9x9---front/tic-tac-toe9x9/src/Game.jsx"],"sourcesContent":["/*import { Component } from \"react\"\nimport io from 'socket.io-client'\n\nexport class Square extends Component {\n    render() {\n        console.log('Rendering Square with value:', this.props.value);\n        return (\n            <button\n            style={{\n                width: '60px',\n                height: '60px',\n                fontSize: '24px',\n                display: 'inline-block',\n                border: '1px solid black',\n                backgroundColor: 'white', \n            }} \n            onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        )\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null).map(() => ({squares: Array(9).fill(null), winner: null})),\n        NextStep: true,\n        Scores: {X: 0, O: 0}\n    }\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000')\n\n        this.socket.on('gameState', (gameState) => {\n            if (gameState && gameState.Board) {\n                this.setState({\n                    Board: gameState.Board,\n                    NextStep: gameState.NextStep,\n                    Scores: gameState.Scores\n                })\n            } else {\n                console.error(\"Ошибка в обновлении состояния игры:\", gameState);\n            }\n        })\n\n\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`)\n        })\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect()\n        }\n    }\n\n    IsEndGame = (squares) => {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n            for (let line of lines) {\n                const [a, b, c] = line\n                if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n                    return squares[a]\n                }\n        }\n\n        return null\n    }\n\n    RenderSquare = (fieldIndex, index) => {\n        const field = this.state.Board[fieldIndex]\n        return (\n            <Square\n            value={field.squares[index]}\n            onClick={() => {this.SClick(fieldIndex, index)}}\n            />\n        )\n    }\n\n    RenderBoard = (fieldIndex) => {\n        return(\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 0)}\n                {this.RenderSquare(fieldIndex, 1)}\n                {this.RenderSquare(fieldIndex, 2)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 3)}\n                {this.RenderSquare(fieldIndex, 4)}\n                {this.RenderSquare(fieldIndex, 5)}\n            </div>\n            <div style={{ display: 'flex' }}>\n                {this.RenderSquare(fieldIndex, 6)}\n                {this.RenderSquare(fieldIndex, 7)}\n                {this.RenderSquare(fieldIndex, 8)}\n            </div>\n            </div>\n        )\n    }\n\n    SClick = (fieldIndex, index) => {\n        console.log(\"SClick invoked with index:\", index);\n        const {Board, NextStep} = this.state\n        const field = Board[fieldIndex]\n\n        if (field.squares[index] || field.winner) {\n            console.log(\"Игра закончена или клетка занята\");\n            return\n        }\n\n        // Сделать ход в поле\n        field.squares[index] = NextStep ? 'X' : 'O';\n    \n        // Изменить шаг для следующего игрока\n        this.setState({ NextStep: !NextStep });\n\n        this.socket.emit('makeMove', {fieldIndex, index})\n    }\n    render() {\n        const {Scores, NextStep, Board} = this.state\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`\n        const scoresText = Scores ? `Счёт: X - ${Scores.X}, O - ${Scores.O}` : `Загружается...`\n\n        return (\n            <div>\n            <div style={{ marginBottom: '10px' }}>{status}</div>\n            <div>{scoresText}</div>\n            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n            {Board.map((_, index) => this.RenderBoard(index))}\n            </div>\n        </div>\n        )\n    }\n}\n\nexport class Game extends Component {\n    //static contextType = AppContext\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                <field style= {{\n                    textAlign: \"center\",\n                    marginTop: \"20px\"\n                }}></field>\n                <chat></chat>\n                </div>\n                <Board/>\n            </>\n        )\n    }\n}\n\n*/\n\n\nimport { Component } from \"react\";\nimport io from 'socket.io-client';\n\nexport class Square extends Component {\n    render() {\n        return (\n            <button\n                style={{\n                    width: '60px',\n                    height: '60px',\n                    fontSize: '24px',\n                    display: 'inline-block',\n                    border: '1px solid black',\n                    backgroundColor: 'white', \n                }} \n                onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nexport class Board extends Component {\n    state = {\n        Board: Array(9).fill(null),\n        NextStep: true,\n        Scores: { X: 0, O: 0 },\n        winner: null,\n    };\n\n    componentDidMount() {\n        this.socket = io('http://localhost:4000');\n\n        // Получаем обновленное состояние игры\n        this.socket.on('gameState', (gameState) => {\n            this.setState({\n                Board: gameState.Board,\n                NextStep: gameState.NextStep,\n                Scores: gameState.Scores,\n                winner: gameState.winner,\n            });\n        });\n\n        // Обработка завершения игры\n        this.socket.on('gameOver', (finalScores) => {\n            alert(`Игра завершена! Победители X - ${finalScores.X} O - ${finalScores.O}`);\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.socket) {\n            this.socket.disconnect();\n        }\n    }\n\n    // Обработчик клика на клетку\n    SClick = (index) => {\n        const { Board, NextStep, winner } = this.state;\n\n        if (Board[index] || winner) {\n            return; // Клетка уже занята или игра завершена\n        }\n\n        // Отправить ход на сервер\n        this.socket.emit('makeMove', { index });\n    };\n\n    render() {\n        const { Scores, NextStep, Board } = this.state;\n        const status = `Следующий ход: ${NextStep ? \"X\" : \"O\"}`;\n        const scoresText = `Счёт: X - ${Scores.X}, O - ${Scores.O}`;\n\n        return (\n            <div>\n                <div style={{ marginBottom: '10px' }}>{status}</div>\n                <div>{scoresText}</div>\n                <div style={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '10px' }}>\n                    {Board.map((value, index) => (\n                        <Square\n                            key={index}\n                            value={value}\n                            onClick={() => this.SClick(index)}\n                        />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport class Game extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"field_position\">\n                    <div style={{ textAlign: \"center\", marginTop: \"20px\" }}></div>\n                </div>\n                <Board />\n            </>\n        );\n    }\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}